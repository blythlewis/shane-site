[{"/Users/jbenassi/coding/shane-lewis/shane-site/src/index.js":"1","/Users/jbenassi/coding/shane-lewis/shane-site/src/Components/Header/Header.jsx":"2","/Users/jbenassi/coding/shane-lewis/shane-site/src/Pages/Home/Home.jsx":"3"},{"size":535,"mtime":1608051293446,"results":"4","hashOfConfig":"5"},{"size":2423,"mtime":1608057789360,"results":"6","hashOfConfig":"5"},{"size":3127,"mtime":1608058794666,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1gcq8cg",{"filePath":"10","messages":"11","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/jbenassi/coding/shane-lewis/shane-site/src/index.js",[],"/Users/jbenassi/coding/shane-lewis/shane-site/src/Components/Header/Header.jsx",["15","16"],"import React from \"react\";\nimport styled from \"styled-components\";\nimport shane_logo from \"../../shane_logo.jpg\";\n\nconst HeaderContainer = styled.header``;\n\nconst ContainerGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(12, 1fr);\n  column-gap: 30px;\n  grid-template-rows: auto;\n  justify-content: center;\n  grid-auto-flow: column;\n  border-bottom: 5px solid #426a5a;\n  position: relative;\n  z-index: 1;\n`;\n\nconst HeaderLogo = styled.div`\n  grid-column: 1/2;\n  z-index: 1;\n  color: white;\n  border-right: 5px solid #426a5a;\n  font-size: 46px;\n  padding-right: 8px;\n`;\n\nconst Nav = styled.nav`\n  grid-column: 7/13;\n  display: grid;\n  grid-template-columns: repeat(5, 1fr);\n  column-gap: 30px;\n  grid-template-rows: auto;\n  justify-content: center;\n  grid-auto-flow: column;\n  font-size: 30px;\n  padding-top: 22px;\n`;\n\nconst NavLinkContainer = styled.div`\n  grid-row-start: 1;\n  grid-column: ${(props) => props.column};\n  color: white;\n\n  text-align: center;\n`;\n\nconst NavLink = styled.a`\n  text-decoration: none;\n  padding-left: 10px;\n  cursor: pointer;\n  font-family: Nunito-SemiBoldItalic;\n`;\n\nconst Circle = styled.div`\n  width: 15px;\n  height: 15px;\n  border-radius: 50%;\n  background-color: #426a5a;\n  grid-row-start: 1;\n  grid-column: ${(props) => props.column};\n  margin: 0 auto;\n  display: inline-block;\n  margin-top: 12px;\n`;\n\n//array [0,1,2,3]\n// navElements is an array of objects. arr = [0,1,2...] object = {key:value} so...  we can loop through an array\n// navElements get the array and map\n\nconst navElements = [\n  { url: \"#about\", name: \"About\", column: \"1/1\" },\n  { url: \"/media\", name: \"Schedule\", column: \"2/2\" },\n  { url: \"/schedule\", name: \"Media\", column: \"3/3\" },\n  { url: \"/schedule\", name: \"Contact\", column: \"4/4\" },\n];\n\nexport const Header = () => {\n  return (\n    <>\n      <HeaderContainer>\n        <ContainerGrid>\n          <HeaderLogo>\n            <NavLink id=\"logo\" href={\"/home\"}>\n              <img className=\"shane_logo\" src={shane_logo}></img>\n            </NavLink>\n          </HeaderLogo>\n          <Nav>\n            {navElements.map((el, i) => {\n              return (\n                <NavLinkContainer key={i} column={el.column}>\n                  <NavLink href={el.url}>{el.name}</NavLink>\n                </NavLinkContainer>\n              );\n            })}\n          </Nav>\n        </ContainerGrid>\n      </HeaderContainer>\n    </>\n  );\n};\n\nexport default Header;\n","/Users/jbenassi/coding/shane-lewis/shane-site/src/Pages/Home/Home.jsx",["17"],{"ruleId":"18","severity":1,"message":"19","line":55,"column":7,"nodeType":"20","messageId":"21","endLine":55,"endColumn":13},{"ruleId":"22","severity":1,"message":"23","line":85,"column":15,"nodeType":"24","endLine":85,"endColumn":60},{"ruleId":"22","severity":1,"message":"23","line":16,"column":13,"nodeType":"24","endLine":16,"endColumn":50},"no-unused-vars","'Circle' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]